#include <iostream>
#include <list>
#define NIL-1
using namespace std;
class Graph{

	int v; //no. of vertices
	list<int> *adj;
	void APUtil(int v,bool visited[], int disc[], int low[], int parent[], bool ap[]);
public:
	Graph (int v);
	void addEdge(int v, int w);
	void AP();
};
Graph::Graph(int v):v(v),adj(new list<int>[v]){}
void Graph::addEdge(int v, int w){
	adj[v].push_back(w);
	adj[w].push_back(v); //Note: the graph is undirected
}
// A recursion function that finds articulation points using
//DFS traversal
//u --> The vertex to be visited next
// visited[] -->keeps tract of visited vertices
// disc[] -->stores discovery times of visited vertices
// parent[] --> stores parent vertices in DFS tree
// ap[] --> store articulation points
void Graph::APUtil(int u, bool visited[], int disc[], int low[], int parent[], bool ap[]){
	//a static variable is used for simplicity, we can
	//avoid use of static variable by padding a pointer.
	static int time=0;

	//Count of children in DFS Tree
	int children =0;

	//Mark the current node as visited
	visited[u]=true;

	//Initialize discovery time and low value
	disc[u]=low[u]=++time;

	//go through all vertices adjacent to this
	list<int>::iterator i;
	for(i=adj[u].begin();i!=adj[u].end();++i){
		int v=*i; //v is current adjacent of u

		//if v is not visited yet, then make it a child of u
		//in DFS tree and recur for it
		if(!visited[v]){
			children++;
			parent[v]=u;
			APUtil(v, visited, disc, low,parent,ap);

			//Check if the subtree rooted with v has a
			//connection to one of the ancestors of u
			low[u]=min(low[u],low[v]);

			//u is an articulation point in following cases
			//(1) u is root of DFS tree and has tow or more children
			if(parent[u]==NIL&&children>1)
				ap[u]=true;
			//(2) if u is not root and low value of one of its child is more
			// than discovery value of u
			if(parent[u]!=NIL&&low[v]>=disc[u])
				ap[u]=true;
		}
		//Update low value of u for parent function calls
		else if(v!=parent[u])
			low[u]=min(low[u],disc[v]);
	}
}

//DFS based function to find all bridges. It uses recursive
// function bridgeUtil()
void Graph::AP(){
	//Mark all the vertices as not visited
	bool *visited = new bool[v];
	int *disc = new int[v];
	int* low = new int[v];
	int* parent = new int[v];
	bool* ap= new bool[v];// to store articulation points

	// initialize parent and visited, and ap arrays
	for(int i=0;i<v;++i){
		parent[i]=NIL;
		visited[i]=false;
		ap[i]=false;
	}
	//Call the recursive helper function to find articulation points
	// in DFS tree rooted with vertex 'i'
	for(int i=0;i<v;++i){
		if(visited[i]==false)
			APUtil(i, visited,disc,low,parent,ap);
	}
	// Now ap[] contains articultion points, print them
	for(int i=0; i<v;++i)
		if(ap[i]==true)
			cout<<i<<" ";
}
//Driver program to test above function
int main(){
	cout << "\nBridges in third graph \n";
	    Graph g3(7);
	    g3.addEdge(0, 1);
	    g3.addEdge(1, 2);
	    g3.addEdge(2, 0);
	    g3.addEdge(1, 3);
	    g3.addEdge(1, 4);
	    g3.addEdge(1, 6);
	    g3.addEdge(3, 5);
	    g3.addEdge(4, 5);
	    g3.AP();

	    return 0;
	}
