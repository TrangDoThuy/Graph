// thuật toán BFS luôn trả về 1 đường đi ngắn nhất (đi qua ít cạnh nhất)


#include <iostream>
#include <list>
#include <vector>
using namespace std;
class Graph{
	int v; //no. of vertices
	list<int>* adjList;
	int* path;
public:
	Graph(int v):v(v), adjList(new list<int>[v]), path(new int[v]){}
	void addEdge(int v, int w){
		adjList[v-1].push_back(w-1);
		adjList[w-1].push_back(v-1);
	}

	void BFS(int s, int e){
		int from=s;
		s-=1;
		vector<bool> visited(v,false);
		list<int>queue;
		visited[s]=true;
		queue.push_back(s);
		list<int>::iterator i;
		while(!queue.empty()){
			s=queue.front();
			queue.pop_front();
			for(i=adjList[s].begin();i!=adjList[s].end();++i){
				if(!visited[*i]){
					cout<<" visting "<<*i+1<<endl;
					visited[*i]=true;
					queue.push_back(*i);
					cout<<"push back "<<s+1<<endl;
					path[*i]=s;
				}
			}
		}

		if(path[e-1]){
			cout<<"have a path from "<<from<<" to "<<e<<endl;
			int cur=e-1;
			cout<<cur+1;
			while(true){
				int pre=path[cur];
				cout<<pre+1;
				if(pre==from-1)
					break;
				cur=pre;
			}
			cout<<endl;
		}
	}

};
int main(){
	Graph gbfs(8);
	gbfs.addEdge(1,2);
	gbfs.addEdge(1,3);
	gbfs.addEdge(2,3);
	gbfs.addEdge(2,4);
	gbfs.addEdge(3,5);
	gbfs.addEdge(4,6);
	gbfs.addEdge(7,8);

	cout << "Depth-first traversal for the given graph:"<<endl;
	gbfs.BFS(1,6);

	return 0;
	}


