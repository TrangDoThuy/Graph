Bài toán: duyệt tất cả các đỉnh có thể đến được từ một đỉnh xuất phát nào đó
xét đồ thị vô hướng
Input:
- dòng 1 chứa: số đỉnh n, số cạnh m của đồ thị, đỉnh xuất phát s, đỉnh kết thúc f
- dòng 2 chứa: 2 số nguyên u và v thể hiện có cạnh nối từ đimhr u và v trong đồ thị
Output:
- Danh sách các đỉnh có thể đến được từ s
- Đường đi từ s tới f

1. Thuật toán tìm kiếm theo chiều sâu: (depth first search)
//
- có thể có nhiều đường đi từ s tới f nhưng thuật toán DFS luôn trả về một đường đi có thứ tự từ điển nhỏ nhất
//From https://www.softwaretestinghelp.com/cpp-dfs-program-to-traverse-graph/
#include <iostream>
#include <list>
#include <bits/stdc++.h>
#include <stack>
using namespace std;
class Graph{
	int v; //no. of vertices
	list<int>* adjList;
public:
	Graph(int v):v(v), adjList(new list<int>[v]){}
	void addEdge(int v, int w){
		adjList[v].push_back(w);
		adjList[w].push_back(v);
	}
	void DFS_util(int s, vector<bool>&visited){
		stack<int> dfsstack;
		dfsstack.push(s);
		while(!dfsstack.empty()){
			s= dfsstack.top();
			dfsstack.pop();
			if(!visited[s])
				visited[s]=true;
			for(auto i=adjList[s].begin();i!=adjList[s].end();++i){
				if(!visited[*i])
					dfsstack.push(*i);
			}

		}

	}
	void DFS(){
		vector<bool>visited(v,false);
		for(int i=0;i<v;++i)
			if(!visited[i])
				DFS_util(i,visited);
	}

};
int main(){
	Graph gdfs(5);
	gdfs.addEdge(0, 1);
	gdfs.addEdge(0, 2);
	gdfs.addEdge(0, 3);
	gdfs.addEdge(1, 2);
	gdfs.addEdge(2, 4);
	gdfs.addEdge(3, 3);
	gdfs.addEdge(4, 4);

	cout << "Depth-first traversal for the given graph:"<<endl;
	gdfs.DFS();

	return 0;
	}



